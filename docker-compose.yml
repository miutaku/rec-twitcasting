---
services:
# rec-api
  api-rec-twitcasting:
    #image: ghcr.io/miutaku/api-rec-twitcasting:latest
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: api-rec-twitcasting
    restart: unless-stopped
    volumes:
      - ./recorded:/root/recorded
#      - /your/path/to/dir:./recorded
    env_file:
      - .env

# batch
  batch-rec-twitcasting:
    #image: ghcr.io/miutaku/batch-rec-twitcasting:latest
    build:
      context: .
      dockerfile: batch/Dockerfile
    depends_on:
      postgres-rec-twitcasting:
        condition: service_healthy
    restart: unless-stopped
    container_name: batch-rec-twitcasting
    env_file:
      - .env

# db
  postgres-rec-twitcasting:
    image: postgres:17.2
    container_name: postgres-rec-twitcasting
    restart: unless-stopped
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    env_file:
      - .env

# manage
#  manage-frontend-rec-twitcasting:
#    #image: ghcr.io/miutaku/manage-frontend-rec-twitcasting:latest
#    build:
#      context: .
#      dockerfile: manage-frontend/Dockerfile
#    container_name: manage-frontend-rec-twitcasting
#    restart: unless-stopped
#    ports:
#      - 8888:8888

  manage-backend-rec-twitcasting:
    #image: ghcr.io/miutaku/manage-backend-rec-twitcasting:latest
    build:
      context: .
      dockerfile: manage-backend/Dockerfile
    container_name: manage-backend-rec-twitcasting
    restart: unless-stopped
    env_file:
      - .env

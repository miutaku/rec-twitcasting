---
services:
# rec-api
  api-rec-twitcasting:
    image: ghcr.io/miutaku/api-rec-twitcasting:latest
    #build:
    #  context: .
    #  dockerfile: api/Dockerfile
    container_name: api-rec-twitcasting
    restart: unless-stopped
    volumes:
      - ./recorded:/root/recorded
#      - /your/path/to/dir:./recorded
    environment:
      - TZ=Asia/Tokyo
      - TWITCASTING_CLIENT_ID=YOUR_TWITCASTING_CLIENT_ID
      - TWITCASTING_CLIENT_SECRET=YOUR_TWITCASTING_CLIENT_SECRET
      - MANAGE_BACKEND_HOST="manage-backend-rec-twitcasting:8080"
      #- LOG_LEVEL=debug

# batch
  batch-rec-twitcasting:
    image: ghcr.io/miutaku/batch-rec-twitcasting:latest
    #build:
    #  context: .
    #  dockerfile: batch/Dockerfile
    depends_on:
      postgres-rec-twitcasting:
        condition: service_healthy
    restart: unless-stopped
    container_name: batch-rec-twitcasting
    environment:
      - FETCH_INTERVAL_SEC=1
      - API_REC_TWITCASTING_URL=http://api-rec-twitcasting:8080
      - DB_HOST=postgres-rec-twitcasting
      - DB_PORT=5432
      - DB_USER=rec-twitcasting-user
      - DB_PASSWORD=rec-twitcasting-pass
      - DB_NAME=rec_twitcasting
      - DB_TABLE_NAME=speakers
      #- LOG_LEVEL=debug

# db
  postgres-rec-twitcasting:
    image: postgres:17.2
    container_name: postgres-rec-twitcasting
    restart: unless-stopped
    environment:
      - POSTGRES_USER=rec-twitcasting-user
      - POSTGRES_PASSWORD=rec-twitcasting-pass
      - POSTGRES_DB=rec_twitcasting
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'SELECT 1'"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

# manage
#  manage-frontend-rec-twitcasting:
#    #image: ghcr.io/miutaku/manage-frontend-rec-twitcasting:latest
#    build:
#      context: .
#      dockerfile: manage-frontend/Dockerfile
#    container_name: manage-frontend-rec-twitcasting
#    restart: unless-stopped
#    ports:
#      - 8888:8888

  manage-backend-rec-twitcasting:
    image: ghcr.io/miutaku/manage-backend-rec-twitcasting:latest
    #build:
    #  context: .
    #  dockerfile: manage-backend/Dockerfile
    container_name: manage-backend-rec-twitcasting
    restart: unless-stopped
    environment:
      - TZ=Asia/Tokyo
      - DB_HOST=postgres-rec-twitcasting
      - DB_PORT=5432
      - DB_USER=rec-twitcasting-user
      - DB_PASSWORD=rec-twitcasting-pass
      - DB_NAME=rec_twitcasting
      - DB_TABLE_NAME=speakers
